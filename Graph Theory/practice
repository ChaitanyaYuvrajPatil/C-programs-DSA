
int vis[100005];
void dfs_cycle_detection(int node){
    queue<pair<int,int>> q;
    q.push(node,0);
    vis[node] =0;

    while(!q.empty(){
        int node = q.front().first;
        int par = q.front().second;

        q.pop();

        for(it : adj[node]){
            if(vis[it] == 0){
                q.push(it,node);
                vis[it] = 1;
            }else if(vis[it] == 1 && it !=par){
                return true;
            }
        }
    }
}

void bfs_cycle_check(){
    bool fl = false;
    for(int i=0;i<=n;i++){
        if(vis[i] == 0){
            if(bsf_cycle(i) == true){
                fl = true;
                break;
            }
        }
    }

    if(fl == true){
        cout<<"Cycle"<<endl;
    }else{
        cout<<"No Cycle"<<endl;
    }
}


void toposort_recurtion(int node,stack<int> &st){
  vis[node] = 1;
  for(auto it : adj[node]){
    if(!vis[it]){
      toposort(it,st);
    }
  }
  st.push(node);
}

void toposort(int n){

  vector<int> indegree(n+1,0);

  for(int i=0;i<=n;i++){
    for(auto it: adj[i]){
      indegree[it]++;
    }
  }

  queue<int>q;
  for(int i=0;i<=n;i++){
    if(indegree[i] == 0){
      q.push(i);
    }
  }

  while(!q.empty()){
    int node = q.front();
    cout<<node<<endl;

    for(auto it: adj[node]){
      indegree[it]--;
      if(indegree[it]==0){
        q.push(it);
      }
    }
  }
}